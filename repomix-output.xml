This file is a merged representation of the entire codebase, combined into a single document by Repomix.
The content has been processed where content has been compressed (code blocks are separated by ⋮---- delimiter).

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Content has been compressed - code blocks are separated by ⋮---- delimiter
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

<additional_info>

</additional_info>

</file_summary>

<directory_structure>
.github/
  workflows/
    ci.yml
    sec-check.yml
src/
  auth/
    middleware.ts
  context/
    RipTideProvider.tsx
  test/
    setup.ts
  index.ts
  types.ts
  utils.test.ts
  utils.ts
.eslintrc.js
.gitignore
.prettierrc
package.json
README.md
tsconfig.json
typedoc.json
vitest.config.ts
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path=".github/workflows/ci.yml">
name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Check formatting
        run: npx prettier --check "src/**/*.{ts,tsx}"
        
      - name: Lint
        run: npm run lint
        
      - name: Run tests
        run: npm test
        
      - name: Build
        run: npm run build
        
  publish:
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20.x'
          registry-url: 'https://registry.npmjs.org'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build
        run: npm run build
        
      - name: Generate documentation
        run: npm run docs
        
      - name: Publish to npm
        run: npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          
      - name: Deploy documentation to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./docs/api
</file>

<file path=".github/workflows/sec-check.yml">
name: Security Checks

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [main]
  schedule:
    - cron: '0 0 * * 0'  # Run weekly on Sundays

jobs:
  # Static Code Analysis
  codeql:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      actions: read
      contents: read
    steps:
      - uses: actions/checkout@v4
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript
          queries: security-and-quality
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:javascript"

  # Dependency Security
  dependencies:
    name: Dependency Checks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      - name: Install dependencies
        run: npm ci
      - name: NPM Audit
        run: npm audit
        continue-on-error: true
      - name: Dependency Review
        uses: actions/dependency-review-action@v3
        if: github.event_name == 'pull_request'

  # Linting and Node.js Security
  linting:
    name: Linting & Node.js Security
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      - name: Install dependencies
        run: npm ci
      - name: ESLint Security Checks
        run: npm run lint
      - name: NodeJSScan
        uses: ajinabraham/njsscan-action@master
        with:
          args: '.'

  # Secret Detection
  secrets:
    name: Secret Detection
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    - name: Secret Scanning
      uses: trufflesecurity/trufflehog@main
      with:
        extra_args: --results=verified,unknown
  # Security Report
  report:
    name: Security Report
    needs: [codeql, dependencies, linting, secrets]
    runs-on: ubuntu-latest
    steps:
      - name: Security Summary
        run: |
          echo "Security Checks Completed"
          echo "All parallel security checks have finished"
          echo "Please review results in the Security tab"
</file>

<file path=".eslintrc.js">

</file>

<file path=".gitignore">
# Dependencies
node_modules
.pnp
.pnp.js

# Build outputs
dist
.next
out
build
coverage

# Environment variables
.env
.env.local
.env.development.local
.env.test.local
.env.production.local

# Cache and logs
.npm
.eslintcache
.cache
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*

# IDE
.idea
.vscode/*
!.vscode/extensions.json
!.vscode/settings.json
!.vscode/tasks.json
!.vscode/launch.json
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?

# OS
.DS_Store
Thumbs.db

# Documentation
docs
</file>

<file path=".prettierrc">
{
  "semi": true,
  "singleQuote": true,
  "trailingComma": "es5",
  "printWidth": 100,
  "tabWidth": 2,
  "useTabs": false,
  "bracketSpacing": true,
  "arrowParens": "avoid",
  "endOfLine": "lf"
}
</file>

<file path="package.json">
{
  "name": "@riptide/core",
  "version": "0.1.0",
  "description": "A complete authentication and user management solution for NextJS applications using Supabase",
  "main": "dist/index.js",
  "module": "dist/index.js",
  "types": "dist/index.d.ts",
  "files": [
    "dist"
  ],
  "scripts": {
    "dev": "tsc --watch",
    "build": "tsc",
    "test": "vitest run",
    "test:watch": "vitest",
    "lint": "eslint . --ext .ts,.tsx",
    "format": "prettier --write \"src/**/*.{ts,tsx}\"",
    "docs": "typedoc",
    "clean": "rimraf dist"
  },
  "keywords": [
    "authentication",
    "supabase",
    "nextjs",
    "react",
    "user-management"
  ],
  "author": "",
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/your-username/riptide.git"
  },
  "bugs": {
    "url": "https://github.com/your-username/riptide/issues"
  },
  "homepage": "https://github.com/your-username/riptide#readme",
  "peerDependencies": {
    "@supabase/ssr": "^0.6.1",
    "@supabase/supabase-js": "^2.39.3",
    "next": ">=13",
    "react": ">=18",
    "react-dom": ">=18"
  },
  "dependencies": {
    "@supabase/ssr": "^0.6.1",
    "@supabase/supabase-js": "^2.39.3"
  },
  "devDependencies": {
    "@testing-library/jest-dom": "^6.1.4",
    "@testing-library/react": "^14.0.0",
    "@types/node": "^20.10.0",
    "@types/react": "^18.2.0",
    "@types/react-dom": "^18.2.0",
    "@typescript-eslint/eslint-plugin": "^6.0.0",
    "@typescript-eslint/parser": "^6.0.0",
    "eslint": "^8.56.0",
    "eslint-config-prettier": "^9.0.0",
    "eslint-plugin-react": "^7.33.0",
    "eslint-plugin-react-hooks": "^4.6.0",
    "jsdom": "^26.0.0",
    "prettier": "^3.0.0",
    "rimraf": "^5.0.10",
    "typedoc": "^0.25.0",
    "typescript": "^5.0.0",
    "vitest": "^1.0.0"
  }
}
</file>

<file path="tsconfig.json">
{
  "compilerOptions": {
    "target": "es2017",
    "module": "commonjs",
    "lib": ["dom", "dom.iterable", "esnext"],
    "declaration": true,
    "sourceMap": true,
    "outDir": "./dist",
    "rootDir": "./src",
    "strict": true,
    "moduleResolution": "node",
    "esModuleInterop": true,
    "skipLibCheck": true,
    "forceConsistentCasingInFileNames": true,
    "resolveJsonModule": true,
    "jsx": "react-jsx"
  },
  "include": ["src/**/*"],
  "exclude": ["node_modules", "dist", "**/*.test.ts"]
}
</file>

<file path="typedoc.json">
{
  "entryPoints": ["src/index.ts"],
  "out": "docs/api",
  "name": "RipTide API Documentation",
  "includeVersion": true,
  "excludePrivate": true,
  "excludeExternals": true,
  "theme": "default",
  "categorizeByGroup": true,
  "categoryOrder": ["Authentication", "User Management", "API Token Management", "Session Management", "*"],
  "readme": "README.md"
}
</file>

<file path="vitest.config.ts">
import { defineConfig } from 'vitest/config';
</file>

<file path="src/utils.test.ts">
import { describe, it, expect, vi, beforeEach, afterEach } from 'vitest';
import {
  createCsrfToken,
  isValidEmail,
  validatePassword,
  sanitizeInput,
  isValidUrl,
  getBrowserFingerprint,
  formatRelativeTime,
} from './utils';
⋮----
// uppercase, lowercase, numbers (no special chars)
⋮----
// uppercase, lowercase, special (no numbers)
⋮----
// Store original values
⋮----
// Mock window.navigator
⋮----
// Mock window.screen
⋮----
// Mock Intl
⋮----
// Restore original values
⋮----
// Simulate server-side rendering
⋮----
// Store original Date constructor
⋮----
// Mock current date to be fixed
⋮----
constructor(...args: any[])
⋮----
// Restore original Date constructor
⋮----
const date = new Date('2023-01-01T11:59:30Z'); // 30 seconds ago
⋮----
const date1 = new Date('2023-01-01T11:59:00Z'); // 1 minute ago
⋮----
const date2 = new Date('2023-01-01T11:55:00Z'); // 5 minutes ago
⋮----
const date1 = new Date('2023-01-01T11:00:00Z'); // 1 hour ago
⋮----
const date2 = new Date('2023-01-01T07:00:00Z'); // 5 hours ago
⋮----
const date1 = new Date('2022-12-31T12:00:00Z'); // 1 day ago
⋮----
const date2 = new Date('2022-12-25T12:00:00Z'); // 7 days ago
⋮----
const date1 = new Date('2022-12-01T12:00:00Z'); // 1 month ago
⋮----
const date2 = new Date('2022-09-01T12:00:00Z'); // 4 months ago
⋮----
const date1 = new Date('2022-01-01T12:00:00Z'); // 1 year ago
⋮----
const date2 = new Date('2020-01-01T12:00:00Z'); // 3 years ago
</file>

<file path="src/auth/middleware.ts">
import { createServerClient } from '@supabase/ssr';
import { NextRequest, NextResponse } from 'next/server';
⋮----
export interface AuthMiddlewareOptions {
  /**
   * Routes that don't require authentication
   */
  publicRoutes?: string[];

  /**
   * Where to redirect unauthenticated users
   * @default '/login'
   */
  authPage?: string;

  /**
   * Where to redirect authenticated users from public routes
   * @default '/dashboard'
   */
  defaultProtectedRoute?: string;
}
⋮----
/**
   * Routes that don't require authentication
   */
⋮----
/**
   * Where to redirect unauthenticated users
   * @default '/login'
   */
⋮----
/**
   * Where to redirect authenticated users from public routes
   * @default '/dashboard'
   */
⋮----
/**
 * Authentication middleware for Next.js
 *
 * @param options - Middleware options
 * @returns Next.js middleware function
 */
export function authMiddleware(options: AuthMiddlewareOptions =
⋮----
// Create a Supabase client using the Server Component helper
⋮----
// Check if the current path is a public route
⋮----
// Handle authentication logic
⋮----
// Redirect unauthenticated users to login
⋮----
// Redirect authenticated users to dashboard from public routes
</file>

<file path="src/context/RipTideProvider.tsx">
import { createContext, useContext, useState, useEffect, ReactNode } from 'react';
import { createClient, SupabaseClient, Session, User } from '@supabase/supabase-js';
import { RipTideConfig, AuthContext } from '../types';
⋮----
// Create the authentication context
⋮----
// Provider props
interface RipTideProviderProps {
  children: ReactNode;
  config?: Partial<RipTideConfig>;
}
⋮----
/**
 * RipTide Provider Component
 *
 * Provides authentication context to all child components.
 *
 * @param props - The provider props
 * @returns The provider component
 */
export function RipTideProvider(
⋮----
// Initialize state
⋮----
// Initialize Supabase client
⋮----
// Get config from props or environment variables
⋮----
// Create Supabase client
⋮----
// Get initial session and user
const initializeAuth = async () =>
⋮----
// Set up auth state change listener
⋮----
// Clean up subscription on unmount
⋮----
// Authentication functions
const login = async (email: string, password: string) =>
⋮----
const register = async (name: string, email: string, password: string) =>
⋮----
const resetPassword = async (_token: string, newPassword: string) =>
⋮----
const sendPasswordResetEmail = async (email: string) =>
⋮----
const verifyEmail = async (_token: string) =>
⋮----
// Note: Email verification is handled automatically by Supabase
// This is a placeholder for any additional verification logic
⋮----
const logout = async () =>
⋮----
// Context value
⋮----
/**
 * Hook to use the authentication context
 *
 * @returns The authentication context
 * @throws Error if used outside of a RipTideProvider
 */
export function useAuth(): AuthContext
</file>

<file path="src/test/setup.ts">
// This file will be used by Vitest for setting up the test environment
// We'll be using this file for setting up any mocks or global configuration for tests
⋮----
import { afterEach } from 'vitest';
import { cleanup } from '@testing-library/react';
⋮----
// Import jest-dom without assigning it
⋮----
// Automatically clean up after each test
</file>

<file path="src/index.ts">
/**
 * RipTide - A complete authentication and user management solution for NextJS applications using Supabase
 * @packageDocumentation
 */
⋮----
// Re-export components and utilities as they are developed
⋮----
// This will be our public API - we'll add more exports as we develop them
</file>

<file path="src/types.ts">
/**
 * Type definitions for RipTide
 */
⋮----
import { Session, User } from '@supabase/supabase-js';
⋮----
/**
 * RipTide provider configuration options
 */
export interface RipTideConfig {
  /**
   * Supabase URL
   */
  supabaseUrl: string;

  /**
   * Supabase anonymous key
   */
  supabaseAnonKey: string;

  /**
   * Enable CAPTCHA for auth forms
   * @default false
   */
  enableCaptcha?: boolean;

  /**
   * CAPTCHA provider
   * @default 'recaptcha'
   */
  captchaProvider?: 'recaptcha' | 'hcaptcha';

  /**
   * CAPTCHA site key
   */
  captchaSiteKey?: string;

  /**
   * Rate limit configuration
   */
  rateLimit?: {
    /**
     * Maximum number of requests
     * @default 100
     */
    max?: number;

    /**
     * Time window in milliseconds
     * @default 900000 (15 minutes)
     */
    windowMs?: number;
  };
}
⋮----
/**
   * Supabase URL
   */
⋮----
/**
   * Supabase anonymous key
   */
⋮----
/**
   * Enable CAPTCHA for auth forms
   * @default false
   */
⋮----
/**
   * CAPTCHA provider
   * @default 'recaptcha'
   */
⋮----
/**
   * CAPTCHA site key
   */
⋮----
/**
   * Rate limit configuration
   */
⋮----
/**
     * Maximum number of requests
     * @default 100
     */
⋮----
/**
     * Time window in milliseconds
     * @default 900000 (15 minutes)
     */
⋮----
/**
 * User profile update data
 */
export interface ProfileUpdateData {
  name?: string;
  email?: string;
  avatar_url?: string;
  [key: string]: string | undefined;
}
⋮----
/**
 * API Token
 */
export interface Token {
  id: string;
  name: string;
  scopes: string[];
  created_at: string;
  last_used_at?: string;
}
⋮----
/**
 * Session with additional information
 */
export interface ExtendedSession extends Session {
  device?: {
    name: string;
    os: string;
    type: string;
  };
  location?: {
    city?: string;
    country?: string;
    ip: string;
  };
  last_active_at: string;
  is_current: boolean;
}
⋮----
/**
 * Authentication context
 */
export interface AuthContext {
  isAuthenticated: boolean;
  isLoading: boolean;
  user: User | null;
  session: Session | null;
  login: (email: string, password: string) => Promise<Session>;
  register: (name: string, email: string, password: string) => Promise<User>;
  resetPassword: (token: string, newPassword: string) => Promise<boolean>;
  sendPasswordResetEmail: (email: string) => Promise<boolean>;
  verifyEmail: (token: string) => Promise<boolean>;
  logout: () => Promise<void>;
}
⋮----
/**
 * User management context
 */
export interface UserContext {
  user: User | null;
  isLoading: boolean;
  updateProfile: (data: ProfileUpdateData) => Promise<User>;
  updatePassword: (currentPassword: string, newPassword: string) => Promise<boolean>;
  deleteAccount: (password: string) => Promise<boolean>;
}
⋮----
/**
 * Token management context
 */
export interface TokenContext {
  tokens: Token[];
  isLoading: boolean;
  createToken: (name: string, scopes: string[]) => Promise<Token>;
  listTokens: () => Promise<Token[]>;
  revokeToken: (id: string) => Promise<boolean>;
}
⋮----
/**
 * Session management context
 */
export interface SessionContext {
  sessions: ExtendedSession[];
  currentSession: ExtendedSession | null;
  isLoading: boolean;
  listSessions: () => Promise<ExtendedSession[]>;
  revokeSession: (id: string) => Promise<boolean>;
}
</file>

<file path="src/utils.ts">
/**
 * Utility functions for RipTide
 */
⋮----
/**
 * Creates a CSRF token
 *
 * @returns A random string to use as a CSRF token
 */
export function createCsrfToken(): string
⋮----
/**
 * Validates an email address format
 *
 * @param email - The email address to validate
 * @returns True if the email format is valid
 */
export function isValidEmail(email: string): boolean
⋮----
/**
 * Validates password strength
 *
 * @param password - The password to validate
 * @returns An object containing validity and feedback
 */
export function validatePassword(password: string):
⋮----
/**
 * Sanitizes user input to prevent XSS attacks
 *
 * @param input - The user input to sanitize
 * @returns Sanitized input
 */
export function sanitizeInput(input: string): string
⋮----
/**
 * Checks if a value is a valid URL
 *
 * @param value - The value to check
 * @returns True if the value is a valid URL
 */
export function isValidUrl(value: string): boolean
⋮----
/**
 * Gets a user's browser fingerprint
 *
 * @returns A string representing the browser fingerprint
 */
export function getBrowserFingerprint(): string
⋮----
// Create a simple fingerprint
⋮----
/**
 * Formats a date as a relative time string (e.g., "2 hours ago")
 *
 * @param date - The date to format
 * @returns A string representing the relative time
 */
export function formatRelativeTime(date: Date | string): string
</file>

<file path="README.md">
# RipTide

A complete authentication and user management solution for NextJS applications using Supabase.

## Features

- 🔐 Authentication (login, register, password reset)
- 👤 User profile management
- 🔑 API token management
- 🕒 Session management
- 🔒 Route protection with middleware
- 🔄 Real-time session syncing

## Installation

```bash
npm install @masonator/riptide
```

## Quick Start

```jsx
// _app.tsx
import { RipTideProvider } from '@riptide/core';

function MyApp({ Component, pageProps }) {
  return (
    <RipTideProvider config={{
      supabaseUrl: process.env.NEXT_PUBLIC_SUPABASE_URL,
      supabaseAnonKey: process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY,
    }}>
      <Component {...pageProps} />
    </RipTideProvider>
  );
}

export default MyApp;
```

```jsx
// middleware.ts
import { authMiddleware } from '@riptide/core';

export default authMiddleware({
  publicRoutes: ['/login', '/register', '/reset-password'],
  authPage: '/login',
  defaultProtectedRoute: '/dashboard',
});

export const config = {
  matcher: ['/((?!api|_next/static|_next/image|favicon.ico).*)'],
};
```

## Usage

### Authentication

```jsx
import { useAuth } from '@riptide/core';

function LoginPage() {
  const { login, isLoading } = useAuth();
  
  const handleLogin = async (e) => {
    e.preventDefault();
    try {
      await login(email, password);
      // Redirect or show success message
    } catch (error) {
      // Handle error
    }
  };
  
  return (
    <form onSubmit={handleLogin}>
      {/* Form fields */}
      <button type="submit" disabled={isLoading}>
        {isLoading ? 'Loading...' : 'Login'}
      </button>
    </form>
  );
}
```

## Development

### Setup

1. Clone the repository:

   ```bash
   git clone https://github.com/your-username/riptide.git
   cd riptide
   ```

2. Install dependencies:

   ```bash
   npm install
   ```

3. Build the package:

   ```bash
   npm run build
   ```

### Development Commands

- `npm run dev` - Watch mode for development
- `npm run build` - Build the package
- `npm test` - Run tests
- `npm run test:watch` - Run tests in watch mode
- `npm run lint` - Lint the code
- `npm run format` - Format the code
- `npm run docs` - Generate documentation
- `npm run clean` - Clean build artifacts

### Project Structure

```shell
riptide/
├── dist/            # Built files
├── docs/            # Documentation
│   └── tasks/       # Project tasks
├── src/             # Source code
│   ├── auth/        # Authentication related functions
│   ├── context/     # React context providers
│   └── test/        # Test utilities
├── tsconfig.json    # TypeScript configuration
└── package.json     # Package configuration
```

## Contributing

We follow a standard GitHub flow for contributions:

1. Create a feature branch from the main branch for your task

   ```bash
   git checkout -b feature/your-feature-name
   ```

2. Make your changes, ensuring all code:

   - Format the code (`npm run format`)
   - Passes linting (`npm run lint`)
   - Has working tests (`npm test`)
   - Builds successfully (`npm run build`)

3. Commit your changes with meaningful commit messages

   > **Note:** We use pre-commit hooks to automatically format, lint, and build your code before each commit. This ensures code quality and prevents pushing code that doesn't meet our standards. These hooks are automatically installed when you run `npm install`.

4. Push your branch and create a Pull Request

5. Request a review from the maintainers

### Pull Request Guidelines

- Keep PRs small and focused on a single feature or fix
- Include tests for new functionality
- Update documentation as needed
- Ensure all CI checks pass before requesting review

## Documentation

For detailed documentation, see [the API docs](https://your-username.github.io/riptide/).

## License

MIT
</file>

</files>
